name: CI/CD Pipeline

on:
  push:
    branches:
      - staging
      - production

jobs:
  ci:
    name: Code Tests & Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Configurar Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Instalar dependências
      - name: Install dependencies
        run: |
          npm install

      # Verificar pacotes instalados
      - name: Check installed npm packages
        run: |
          npm list html-validator

      # Rodar validação do HTML
      - name: Validate HTML
        run: |
          npm run validate

  cd:
    name: Build & Push Docker Image
    needs: ci  # Só roda se o CI passar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Iniciando o empacotamento da aplicação com Docker
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)  # Extrai o nome do repositório
          BRANCH_NAME=${{ github.ref_name }}

          if [[ "$BRANCH_NAME" == "staging" ]]; then
            TAG="staging"
          elif [[ "$BRANCH_NAME" == "production" ]]; then
            TAG="production"
          else
            echo "Branch inválida para deploy."
            exit 1
          fi

          echo "Construindo imagem ${{ secrets.DOCKER_USERNAME }}/$REPO_NAME:$TAG"

          docker build -t ${{ secrets.DOCKER_USERNAME }}/$REPO_NAME:$TAG .

      - name: Iniciando o envio da imagem para o DockerHub
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)  # Extrai o nome do repositório
          BRANCH_NAME=${{ github.ref_name }}

          if [[ "$BRANCH_NAME" == "staging" ]]; then
            TAG="staging"
          elif [[ "$BRANCH_NAME" == "production" ]]; then
            TAG="production"
          else
            echo "Branch inválida para deploy."
            exit 1
          fi

          echo "Construindo imagem ${{ secrets.DOCKER_USERNAME }}/$REPO_NAME:$TAG"

          docker push ${{ secrets.DOCKER_USERNAME }}/$REPO_NAME:$TAG

  release:
    name: Release
    needs: cd  # Só roda se o CD for bem-sucedido
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Criando Tag e Release
        run: |
          TZ="America/Sao_Paulo"  # Define o fuso horário para São Paulo (BRT)
          export TZ

          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')  # Pega o nome da branch e remove '/'
          TAG_NAME="${BRANCH_NAME}-$(date +'%Y-%m-%d-%H%M')"
          RELEASE_TITLE="Release ${BRANCH_NAME} - $(date +'%Y-%m-%d %H:%M')"

          echo "Criando tag e release: $TAG_NAME"

          git tag $TAG_NAME
          git push origin $TAG_NAME

          gh release create $TAG_NAME --title "$RELEASE_TITLE" --notes "Gerado automaticamente pelo CI/CD"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
